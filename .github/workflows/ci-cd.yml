name: CI/CD Pipeline

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]

env:
  NODE_VERSION: '18'
  PYTHON_VERSION: '3.11'

jobs:
  # Frontend Tests
  frontend-tests:
    runs-on: ubuntu-latest
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}
        cache: 'npm'
    
    - name: Install dependencies
      run: npm ci
    
    - name: Run linting
      run: npm run lint
    
    - name: Run unit tests
      run: npm run test:coverage
    
    - name: Upload coverage reports
      uses: codecov/codecov-action@v3
      with:
        file: ./coverage/lcov.info
        flags: frontend
        name: frontend-coverage
    
    - name: Build application
      run: npm run build
      env:
        VITE_SUPABASE_URL: ${{ secrets.VITE_SUPABASE_URL }}
        VITE_SUPABASE_ANON_KEY: ${{ secrets.VITE_SUPABASE_ANON_KEY }}
    
    - name: Upload build artifacts
      uses: actions/upload-artifact@v4
      with:
        name: frontend-build
        path: dist/

  # Python Backend Tests
  python-tests:
    runs-on: ubuntu-latest
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Setup Python
      uses: actions/setup-python@v4
      with:
        python-version: ${{ env.PYTHON_VERSION }}
    
    - name: Cache Python dependencies
      uses: actions/cache@v3
      with:
        path: ~/.cache/pip
        key: ${{ runner.os }}-pip-${{ hashFiles('python_core/requirements*.txt') }}
        restore-keys: |
          ${{ runner.os }}-pip-
    
    - name: Install Python dependencies
      working-directory: ./python_core
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        pip install -r requirements-test.txt
    
    - name: Run Python linting
      working-directory: ./python_core
      run: |
        pip install flake8 black isort
        flake8 main.py --max-line-length=100
        black --check main.py
        isort --check-only main.py
    
    - name: Run Python tests
      working-directory: ./python_core
      run: |
        pytest --cov=main --cov-report=xml --cov-report=term-missing --junitxml=pytest-results.xml
    
    - name: Upload Python coverage
      uses: codecov/codecov-action@v3
      with:
        file: ./python_core/coverage.xml
        flags: backend
        name: python-coverage
    
    - name: Upload Python test results
      uses: actions/upload-artifact@v4
      if: always()
      with:
        name: python-test-results
        path: python_core/pytest-results.xml

  # Mobile Tests
  mobile-tests:
    runs-on: ubuntu-latest
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}
        cache: 'npm'
        cache-dependency-path: mobile/package-lock.json
    
    - name: Install mobile dependencies
      working-directory: ./mobile
      run: npm ci
    
    - name: Run mobile tests
      working-directory: ./mobile
      run: npm test -- --coverage --watchAll=false
    
    - name: Upload mobile coverage
      uses: codecov/codecov-action@v3
      with:
        file: ./mobile/coverage/lcov.info
        flags: mobile
        name: mobile-coverage

  # End-to-End Tests
  e2e-tests:
    runs-on: ubuntu-latest
    needs: [frontend-tests]
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}
        cache: 'npm'
    
    - name: Install dependencies
      run: npm ci
    
    - name: Install Playwright browsers
      run: npx playwright install --with-deps
    
    - name: Download build artifacts
      uses: actions/download-artifact@v3
      with:
        name: frontend-build
        path: dist/
    
    - name: Start Python service for E2E tests
      working-directory: ./python_core
      run: |
        pip install -r requirements.txt
        python main.py &
        sleep 10
      env:
        GEMINI_API_KEY: ${{ secrets.GEMINI_API_KEY }}
    
    - name: Run E2E tests
      run: npm run test:e2e
      env:
        VITE_SUPABASE_URL: ${{ secrets.VITE_SUPABASE_URL }}
        VITE_SUPABASE_ANON_KEY: ${{ secrets.VITE_SUPABASE_ANON_KEY }}
    
    - name: Upload E2E test results
      uses: actions/upload-artifact@v4
      if: always()
      with:
        name: playwright-report
        path: playwright-report/

  # Security Scanning
  security-scan:
    runs-on: ubuntu-latest
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Run Trivy vulnerability scanner
      uses: aquasecurity/trivy-action@master
      with:
        scan-type: 'fs'
        scan-ref: '.'
        format: 'sarif'
        output: 'trivy-results.sarif'
    
    - name: Upload Trivy scan results
      uses: github/codeql-action/upload-sarif@v3
      with:
        sarif_file: 'trivy-results.sarif'
    
    - name: Run npm audit
      run: npm audit --audit-level=high
    
    - name: Check for secrets
      uses: trufflesecurity/trufflehog@main
      with:
        path: ./
        base: main
        head: HEAD

  # Docker Build and Test
  docker-build:
    runs-on: ubuntu-latest
    needs: [python-tests]
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3
    
    - name: Build Python service Docker image
      working-directory: ./python_core
      run: |
        docker build -t reelapps-ai:test .
    
    - name: Test Docker image
      run: |
        docker run -d --name test-container -p 8000:8000 reelapps-ai:test
        sleep 10
        curl -f http://localhost:8000/health || exit 1
        docker stop test-container

  # Deploy to Staging
  deploy-staging:
    runs-on: ubuntu-latest
    needs: [frontend-tests, python-tests, mobile-tests, e2e-tests, security-scan]
    if: github.ref == 'refs/heads/develop'
    
    environment:
      name: staging
      url: https://staging.reelapps.com
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Download build artifacts
      uses: actions/download-artifact@v3
      with:
        name: frontend-build
        path: dist/
    
    - name: Deploy to Netlify (Staging)
      uses: nwtgck/actions-netlify@v2.0
      with:
        publish-dir: './dist'
        production-branch: main
        github-token: ${{ secrets.GITHUB_TOKEN }}
        deploy-message: "Deploy from GitHub Actions - ${{ github.sha }}"
        enable-pull-request-comment: false
        enable-commit-comment: true
        overwrites-pull-request-comment: true
      env:
        NETLIFY_AUTH_TOKEN: ${{ secrets.NETLIFY_AUTH_TOKEN }}
        NETLIFY_SITE_ID: ${{ secrets.NETLIFY_STAGING_SITE_ID }}
    
    - name: Deploy Python Service to Staging
      run: |
        echo "Deploying Python service to staging environment"
        # Example: Deploy to cloud provider
        # docker build -t reelapps-ai:staging ./python_core
        # docker push your-registry/reelapps-ai:staging
        # kubectl apply -f k8s/staging/
    
    - name: Update Supabase Edge Functions (Staging)
      run: |
        echo "Deploying Edge Functions to staging"
        # supabase functions deploy --project-ref ${{ secrets.SUPABASE_STAGING_PROJECT_REF }}

  # Deploy to Production
  deploy-production:
    runs-on: ubuntu-latest
    needs: [frontend-tests, python-tests, mobile-tests, e2e-tests, security-scan, docker-build]
    if: github.ref == 'refs/heads/main'
    
    environment:
      name: production
      url: https://reelapps.com
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Download build artifacts
      uses: actions/download-artifact@v3
      with:
        name: frontend-build
        path: dist/
    
    - name: Deploy to Netlify (Production)
      uses: nwtgck/actions-netlify@v2.0
      with:
        publish-dir: './dist'
        production-deploy: true
        github-token: ${{ secrets.GITHUB_TOKEN }}
        deploy-message: "Production deploy - ${{ github.sha }}"
        enable-pull-request-comment: false
        enable-commit-comment: true
      env:
        NETLIFY_AUTH_TOKEN: ${{ secrets.NETLIFY_AUTH_TOKEN }}
        NETLIFY_SITE_ID: ${{ secrets.NETLIFY_PRODUCTION_SITE_ID }}
    
    - name: Deploy Python Service to Production
      run: |
        echo "Deploying Python service to production environment"
        # Production deployment commands
        # docker build -t reelapps-ai:${{ github.sha }} ./python_core
        # docker push your-registry/reelapps-ai:${{ github.sha }}
        # kubectl set image deployment/reelapps-ai reelapps-ai=your-registry/reelapps-ai:${{ github.sha }}
    
    - name: Update Supabase Edge Functions (Production)
      run: |
        echo "Deploying Edge Functions to production"
        # supabase functions deploy --project-ref ${{ secrets.SUPABASE_PRODUCTION_PROJECT_REF }}
    
    - name: Run post-deployment smoke tests
      run: |
        echo "Running post-deployment smoke tests"
        curl -f https://reelapps.com/health || exit 1
        # Add more smoke tests

  # Performance Testing
  performance-tests:
    runs-on: ubuntu-latest
    needs: [deploy-staging]
    if: github.ref == 'refs/heads/develop'
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Run Lighthouse CI
      uses: treosh/lighthouse-ci-action@v9
      with:
        urls: |
          https://staging.reelapps.com
          https://staging.reelapps.com/reelskills
          https://staging.reelapps.com/reelhunter
        uploadArtifacts: true
        temporaryPublicStorage: true
    
    - name: Run load tests
      run: |
        echo "Running load tests against staging environment"
        # Example: Use k6, Artillery, or similar tool
        # npx artillery run load-test.yml

  # Mobile App Build (iOS/Android)
  mobile-build:
    runs-on: macos-latest
    needs: [mobile-tests]
    if: github.ref == 'refs/heads/main'
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}
    
    - name: Install mobile dependencies
      working-directory: ./mobile
      run: npm ci
    
    - name: Setup React Native
      uses: ./.github/actions/setup-react-native
    
    - name: Build iOS app
      working-directory: ./mobile
      run: |
        cd ios
        xcodebuild -workspace ReelApps.xcworkspace -scheme ReelApps -configuration Release -archivePath ReelApps.xcarchive archive
    
    - name: Build Android app
      working-directory: ./mobile
      run: |
        cd android
        ./gradlew assembleRelease
    
    - name: Upload mobile artifacts
      uses: actions/upload-artifact@v4
      with:
        name: mobile-builds
        path: |
          mobile/ios/ReelApps.xcarchive
          mobile/android/app/build/outputs/apk/release/

  # Notification
  notify:
    runs-on: ubuntu-latest
    needs: [deploy-production]
    if: always()
    
    steps:
    - name: Notify deployment status
      uses: 8398a7/action-slack@v3
      with:
        status: ${{ job.status }}
        channel: '#deployments'
        text: |
          Deployment Status: ${{ job.status }}
          Branch: ${{ github.ref }}
          Commit: ${{ github.sha }}
          Author: ${{ github.actor }}
      env:
        SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL }}
      if: always()
    
    - name: Create GitHub Release
      if: github.ref == 'refs/heads/main' && needs.deploy-production.result == 'success'
      uses: actions/create-release@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        tag_name: v${{ github.run_number }}
        release_name: Release v${{ github.run_number }}
        body: |
          Automated release from main branch
          Commit: ${{ github.sha }}
          
          Changes in this release:
          ${{ github.event.head_commit.message }}
        draft: false
        prerelease: false